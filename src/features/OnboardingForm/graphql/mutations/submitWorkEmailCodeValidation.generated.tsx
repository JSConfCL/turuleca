/* eslint-disable */
/* @ts-nocheck */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import * as Types from '../../../../api/gql/graphql';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
import * as ApolloReactHooks from '@/api/ApolloHooks';
const defaultOptions = {} as const;
export type SubmitWorkEmailCodeValidationMutationVariables = Types.Exact<{
  confirmationToken: Types.Scalars['String']['input'];
}>;


export type SubmitWorkEmailCodeValidationMutation = { __typename?: 'Mutation', validateWorkEmail: { __typename?: 'WorkEmail', id: string, isValidated: boolean } };


export const SubmitWorkEmailCodeValidationDocument = gql`
    mutation SubmitWorkEmailCodeValidation($confirmationToken: String!) {
  validateWorkEmail(confirmationToken: $confirmationToken) {
    id
    isValidated
  }
}
    `;
export type SubmitWorkEmailCodeValidationMutationFn = Apollo.MutationFunction<SubmitWorkEmailCodeValidationMutation, SubmitWorkEmailCodeValidationMutationVariables>;

/**
 * __useSubmitWorkEmailCodeValidationMutation__
 *
 * To run a mutation, you first call `useSubmitWorkEmailCodeValidationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubmitWorkEmailCodeValidationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [submitWorkEmailCodeValidationMutation, { data, loading, error }] = useSubmitWorkEmailCodeValidationMutation({
 *   variables: {
 *      confirmationToken: // value for 'confirmationToken'
 *   },
 * });
 */
export function useSubmitWorkEmailCodeValidationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubmitWorkEmailCodeValidationMutation, SubmitWorkEmailCodeValidationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<SubmitWorkEmailCodeValidationMutation, SubmitWorkEmailCodeValidationMutationVariables>(SubmitWorkEmailCodeValidationDocument, options);
      }
export type SubmitWorkEmailCodeValidationMutationHookResult = ReturnType<typeof useSubmitWorkEmailCodeValidationMutation>;
export type SubmitWorkEmailCodeValidationMutationResult = Apollo.MutationResult<SubmitWorkEmailCodeValidationMutation>;
export type SubmitWorkEmailCodeValidationMutationOptions = Apollo.BaseMutationOptions<SubmitWorkEmailCodeValidationMutation, SubmitWorkEmailCodeValidationMutationVariables>;