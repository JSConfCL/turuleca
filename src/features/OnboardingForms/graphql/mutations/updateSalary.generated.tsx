/* eslint-disable */
/* @ts-nocheck */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import * as Types from '../../../../api/gql/graphql';

import { gql } from '@apollo/client';
import { SalaryFragmentDoc } from '../fragments/salaryFragment.generated';
import * as Apollo from '@apollo/client';
import * as ApolloReactHooks from '@/api/ApolloHooks';
const defaultOptions = {} as const;
export type UpdateSalaryMutationVariables = Types.Exact<{
  input: Types.UpdateSalaryInput;
}>;


export type UpdateSalaryMutation = { __typename?: 'Mutation', updateSalary: { __typename?: 'Salary', amount: number, countryCode: string, currencyCode: string, gender?: Types.Gender | null, genderOtherText?: string | null, id: string, typeOfEmployment: Types.TypeOfEmployment, workMetodology: Types.WorkMetodology, yearsOfExperience: number, company: { __typename?: 'Company', description?: string | null, domain: string }, workRole: { __typename?: 'WorkRole', description: string, id: string, name: string, seniority: string } } };


export const UpdateSalaryDocument = gql`
    mutation UpdateSalary($input: UpdateSalaryInput!) {
  updateSalary(input: $input) {
    ...Salary
  }
}
    ${SalaryFragmentDoc}`;
export type UpdateSalaryMutationFn = Apollo.MutationFunction<UpdateSalaryMutation, UpdateSalaryMutationVariables>;

/**
 * __useUpdateSalaryMutation__
 *
 * To run a mutation, you first call `useUpdateSalaryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSalaryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSalaryMutation, { data, loading, error }] = useUpdateSalaryMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateSalaryMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateSalaryMutation, UpdateSalaryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<UpdateSalaryMutation, UpdateSalaryMutationVariables>(UpdateSalaryDocument, options);
      }
export type UpdateSalaryMutationHookResult = ReturnType<typeof useUpdateSalaryMutation>;
export type UpdateSalaryMutationResult = Apollo.MutationResult<UpdateSalaryMutation>;
export type UpdateSalaryMutationOptions = Apollo.BaseMutationOptions<UpdateSalaryMutation, UpdateSalaryMutationVariables>;