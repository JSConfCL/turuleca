/* eslint-disable */
/* @ts-nocheck */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import * as Types from '../../../../api/gql/graphql';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
import * as ApolloReactHooks from '@/api/ApolloHooks';
const defaultOptions = {} as const;
export type SubmitWorkEmailMutationVariables = Types.Exact<{
  email: Types.Scalars['String']['input'];
}>;


export type SubmitWorkEmailMutation = { __typename?: 'Mutation', startWorkEmailValidation: { __typename?: 'WorkEmail', id: string, isValidated: boolean } };


export const SubmitWorkEmailDocument = gql`
    mutation SubmitWorkEmail($email: String!) {
  startWorkEmailValidation(email: $email) {
    id
    isValidated
  }
}
    `;
export type SubmitWorkEmailMutationFn = Apollo.MutationFunction<SubmitWorkEmailMutation, SubmitWorkEmailMutationVariables>;

/**
 * __useSubmitWorkEmailMutation__
 *
 * To run a mutation, you first call `useSubmitWorkEmailMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubmitWorkEmailMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [submitWorkEmailMutation, { data, loading, error }] = useSubmitWorkEmailMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useSubmitWorkEmailMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubmitWorkEmailMutation, SubmitWorkEmailMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<SubmitWorkEmailMutation, SubmitWorkEmailMutationVariables>(SubmitWorkEmailDocument, options);
      }
export type SubmitWorkEmailMutationHookResult = ReturnType<typeof useSubmitWorkEmailMutation>;
export type SubmitWorkEmailMutationResult = Apollo.MutationResult<SubmitWorkEmailMutation>;
export type SubmitWorkEmailMutationOptions = Apollo.BaseMutationOptions<SubmitWorkEmailMutation, SubmitWorkEmailMutationVariables>;